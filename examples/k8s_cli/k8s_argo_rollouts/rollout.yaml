apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: cci-rollout-demo
  annotations:
    # optional fields to track the deployment triggers in the dashboard
    # you need all 3 to effectively display the deployment trigger in the UI
    circleci.com/pipeline-id: ${CIRCLE_PIPELINE_ID}
    circleci.com/workflow-id: ${CIRCLE_WORKFLOW_ID}
    circleci.com/job-number: "${CIRCLE_BUILD_NUM}"
    # mandatory field, with this CircleCI can safely start tracking his component and make sure that only people authorized to use
    # this project can do operations over it on the CircleCI release dashboard like rollback, scale, restart. etc.
    # project ID maps with the git repository linked
    circleci.com/project-id: ${CIRCLE_PROJECT_ID}
  labels:
    # mandatory labels for CircleCI k8s release agent to identify the component and start tracking events
    #
    # you can also use common `app`` and `version` labels
    # app: cci-rollout-demo
    # version: ${VERSION}
    circleci.com/component-name: cci-rollout-demo
    circleci.com/version: ${VERSION}
spec:
  replicas: 2
  revisionHistoryLimit: 5
  rollbackWindow:
    revisions: 3
  strategy:
    canary:
      steps:
        - setWeight: 15
        - pause: { duration: "5m" }
        - setWeight: 50
        - pause: { duration: "5m" }
        - setWeight: 100
        - pause: { duration: "5m" }
  selector:
    matchLabels:
      circleci.com/component-name: cci-rollout-demo
  template:
    metadata:
      labels:
        # it is important to place these labels here as well so they
        # can be propagated to child objects like replicasets and pods
        # remeber you can also use common `app` and `version` labels here.
        circleci.com/component-name: cci-rollout-demo
        circleci.com/version: ${VERSION}
    spec:
      containers:
        - image: argoproj/rollouts-demo:${TAG}
          imagePullPolicy: Always
          name: color-demo
          resources:
            requests:
              memory: 32Mi
              cpu: 5m
          ports:
            - containerPort: 8080
              protocol: TCP
